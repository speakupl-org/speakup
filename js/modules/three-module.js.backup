// /js/modules/three-module.js - Premium Edition with Advanced Effects

// --- Core Three.js Imports ---
import * as THREE from 'three';
import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';
import { RoundedBoxGeometry } from './RoundedBoxGeometry.js';

// --- Controls and Utilities ---
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

// --- GSAP for animations ---
import { gsap } from 'gsap';

export function setup3DScene(canvas) {
    console.log("ðŸš€ Initializing premium 3D scene...");
    
    // Enhanced scene setup with premium features
    const scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0x050505, 10, 25);

    // Camera with enhanced settings
    const camera = new THREE.PerspectiveCamera(45, canvas.clientWidth / canvas.clientHeight, 0.1, 100);
    camera.position.set(0, 0, 7);
    camera.lookAt(0, 0, 0);

    // Premium renderer configuration with transparent background
    const renderer = new THREE.WebGLRenderer({ 
        canvas, 
        antialias: true, 
        alpha: true,
        powerPreference: "high-performance"
    });
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1.0;
    renderer.setClearColor(0x000000, 0); // Transparent background - no bleeding
    
    console.log("âœ… Renderer configured");

    // Subtle camera controls
    const controls = new OrbitControls(camera, canvas);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.enableZoom = false;
    controls.enablePan = false;
    controls.minPolarAngle = Math.PI / 3;
    controls.maxPolarAngle = Math.PI / 1.5;
    controls.autoRotate = true;
    controls.autoRotateSpeed = 0.5;

    // Polished Crystal Material (as specified)
    const geometry = new RoundedBoxGeometry(2, 2, 2, 8, 0.15);
    const material = new THREE.MeshPhysicalMaterial({
        color: 0x9EB7B5, // blue-gray tint
        metalness: 0.1,
        roughness: 0.01,
        transmission: 0.98,
        ior: 1.7,
        thickness: 2.0,
        clearcoat: 1.0,
        clearcoatRoughness: 0.0,
        reflectivity: 1.0,
        envMapIntensity: 1.2,
        transparent: true,
        opacity: 0.98,
        side: THREE.DoubleSide
    });
    const cube = new THREE.Mesh(geometry, material);
    cube.visible = false;
    scene.add(cube);

    // Narrative Lights (all start at intensity 0)
    const pillar1 = new THREE.PointLight(0xFFD700, 0, 10); // Gold
    pillar1.position.set(3, 1, 3);
    scene.add(pillar1);
    const pillar2 = new THREE.PointLight(0x4A90E2, 0, 10); // Blue
    pillar2.position.set(-3, 1, 3);
    scene.add(pillar2);
    const pillar3 = new THREE.PointLight(0xFFFFFF, 0, 10); // White
    pillar3.position.set(0, -3, 3);
    scene.add(pillar3);
    const lights = { pillar1, pillar2, pillar3 };

    // Minimal ambient
    scene.add(new THREE.AmbientLight(0x404040, 0.08));

    // Animation loop
    function animate() {
        renderer.render(scene, camera);
        requestAnimationFrame(animate);
    }
    animate();

    // Reveal cube after a short delay (simulate asset load)
    setTimeout(() => { cube.visible = true; }, 300);

    // Return for animation-controller
    return { cube, lights };
}