name: Deploy SpeakUp Website

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Validate Content Files
      run: |
        python3 dev-server.py --content-check
        echo "✅ Content validation passed"
        
    - name: Run Production Build
      run: npm run build:prod
      
    - name: Test Build Output
      run: |
        # Check if critical files exist
        test -f dist/index.html || exit 1
        test -f dist/sitemap.xml || exit 1
        test -f dist/robots.txt || exit 1
        test -f dist/sw.js || exit 1
        test -f dist/css/bundle.min.css || exit 1
        test -f dist/js/bundle.min.js || exit 1
        echo "✅ Build validation passed"
        
    - name: Deploy to Cloudflare Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: speakup-website
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Deploy to Vercel (Backup)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'
        
    - name: Performance Audit
      if: github.event_name == 'pull_request'
      run: |
        # Start local server for testing
        python3 -m http.server 8080 --directory dist &
        SERVER_PID=$!
        sleep 5
        
        # Basic performance check
        curl -s -o /dev/null -w "Status: %{http_code}, Time: %{time_total}s\n" http://localhost:8080/
        
        # Cleanup
        kill $SERVER_PID
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: dist/
        retention-days: 30
        
    - name: Comment PR with Build Info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read build manifest
          const manifest = JSON.parse(fs.readFileSync('dist/build-manifest.json', 'utf8'));
          
          // Calculate total size
          const getDirectorySize = (dir) => {
            let size = 0;
            const files = fs.readdirSync(dir, { withFileTypes: true });
            
            for (const file of files) {
              const filePath = path.join(dir, file.name);
              if (file.isDirectory()) {
                size += getDirectorySize(filePath);
              } else {
                size += fs.statSync(filePath).size;
              }
            }
            return size;
          };
          
          const totalSize = getDirectorySize('dist');
          const formatBytes = (bytes) => {
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];
          };
          
          const comment = `## 🎯 Build Summary
          
**Phase 3 Production Build Complete!**

📊 **Build Stats:**
- 📄 Pages: ${manifest.pages.length}
- 📦 Total Size: ${formatBytes(totalSize)}
- ⏱️ Build Features: ${manifest.features.length} optimizations applied

🚀 **Optimizations Applied:**
${manifest.features.map(feature => `- ✅ ${feature}`).join('\n')}

📋 **Files Generated:**
${manifest.pages.map(page => `- \`${page.file}\``).join('\n')}

🔗 **Preview:** Deploy this PR to see the changes in action!`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
